#!/usr/bin/env python3
"""
EAS-Specific Edge Cases Test
Tests edge cases that commonly cause issues in EAS builds
"""

import json
import os
import re

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print(f"{'='*60}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def test_eas_build_import_issues():
    """Test for import issues that cause EAS build failures"""
    print_header("Testing EAS Build Import Issues")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Check for problematic imports
        problematic_imports = [
            "require('./notificationService')",
            "import.*notificationService",
            "require.*notificationService"
        ]
        
        found_problematic = []
        for pattern in problematic_imports:
            if re.search(pattern, content):
                found_problematic.append(pattern)
        
        if found_problematic:
            print_error(f"Problematic imports found: {found_problematic}")
            return False
        
        print_success("No problematic imports found")
        
        # Check for proper imports
        proper_imports = [
            "import.*expo-notifications",
            "import.*react-native",
            "import.*firebase",
            "import.*logger"
        ]
        
        missing_imports = []
        for pattern in proper_imports:
            if not re.search(pattern, content):
                missing_imports.append(pattern)
        
        if missing_imports:
            print_warning(f"Missing proper imports: {missing_imports}")
        
        return True
        
    except Exception as e:
        print_error(f"Error testing import issues: {e}")
        return False

def test_eas_build_permission_edge_cases():
    """Test permission edge cases that fail in EAS builds"""
    print_header("Testing EAS Build Permission Edge Cases")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test permission initialization scenarios
        permission_scenarios = [
            "getPermissionsAsync",
            "requestPermissionsAsync",
            "existingStatus !== 'granted'",
            "finalStatus !== 'granted'",
            "isInitialized = false",
            "await this.initialize()"
        ]
        
        missing_permissions = []
        for scenario in permission_scenarios:
            if scenario not in content:
                missing_permissions.append(scenario)
        
        if missing_permissions:
            print_error(f"Missing permission handling: {missing_permissions}")
            return False
        
        print_success("All permission edge cases handled for EAS builds")
        
        # Test initialization before scheduling
        if "if (!this.isInitialized)" in content and "await this.initialize()" in content:
            print_success("Proper initialization before scheduling")
        else:
            print_error("Missing initialization before scheduling")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Error testing permission edge cases: {e}")
        return False

def test_eas_build_platform_specific_issues():
    """Test platform-specific issues that cause EAS build failures"""
    print_header("Testing EAS Build Platform-Specific Issues")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test platform-specific handling
        platform_scenarios = [
            "Platform.OS === 'ios'",
            "Platform.OS",
            "categoryId: 'general'",
            "threadId: type",
            "console.log(`[iOS]",
            "console.error(`[iOS]"
        ]
        
        missing_platform = []
        for scenario in platform_scenarios:
            if scenario not in content:
                missing_platform.append(scenario)
        
        if missing_platform:
            print_warning(f"Missing platform-specific handling: {missing_platform}")
        
        print_success("Platform-specific issues handled for EAS builds")
        
        # Test iOS-specific data structure
        if "categoryId: 'general'" in content and "threadId: type" in content:
            print_success("iOS-specific data structure implemented")
        else:
            print_warning("iOS-specific data structure could be improved")
        
        return True
        
    except Exception as e:
        print_error(f"Error testing platform-specific issues: {e}")
        return False

def test_eas_build_timing_edge_cases():
    """Test timing edge cases that cause issues in EAS builds"""
    print_header("Testing EAS Build Timing Edge Cases")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test timing scenarios that cause EAS build issues
        timing_scenarios = [
            "secondsUntilTrigger <= 0",
            "seconds: 60",
            "Minimum 1 minute delay",
            "Math.floor((scheduledFor.getTime() - Date.now()) / 1000)",
            "trigger = {",
            "type: 'timeInterval'"
        ]
        
        missing_timing = []
        for scenario in timing_scenarios:
            if scenario not in content:
                missing_timing.append(scenario)
        
        if missing_timing:
            print_error(f"Missing timing handling: {missing_timing}")
            return False
        
        print_success("All timing edge cases handled for EAS builds")
        
        # Test minimum delay enforcement
        if "seconds: 60" in content and "Minimum 1 minute delay" in content:
            print_success("Minimum delay enforcement implemented")
        else:
            print_error("Minimum delay enforcement missing")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Error testing timing edge cases: {e}")
        return False

def test_eas_build_error_handling():
    """Test error handling that prevents EAS build crashes"""
    print_header("Testing EAS Build Error Handling")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test error handling scenarios
        error_scenarios = [
            "catch (error)",
            "logger.error",
            "throw error",
            "logger.warn",
            "Failed to schedule notification",
            "Failed to cancel notification"
        ]
        
        missing_errors = []
        for scenario in error_scenarios:
            if scenario not in content:
                missing_errors.append(scenario)
        
        if missing_errors:
            print_warning(f"Missing error handling: {missing_errors}")
        
        print_success("Error handling implemented for EAS builds")
        
        # Test specific error messages
        if "Failed to schedule notification" in content:
            print_success("Specific error messages implemented")
        else:
            print_warning("Specific error messages could be improved")
        
        return True
        
    except Exception as e:
        print_error(f"Error testing error handling: {e}")
        return False

def test_eas_build_singleton_pattern():
    """Test singleton pattern that prevents EAS build issues"""
    print_header("Testing EAS Build Singleton Pattern")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test singleton pattern
        singleton_scenarios = [
            "private static instance",
            "getInstance()",
            "if (!UnifiedNotificationService.instance)",
            "UnifiedNotificationService.instance = new UnifiedNotificationService()"
        ]
        
        missing_singleton = []
        for scenario in singleton_scenarios:
            if scenario not in content:
                missing_singleton.append(scenario)
        
        if missing_singleton:
            print_error(f"Missing singleton pattern: {missing_singleton}")
            return False
        
        print_success("Singleton pattern implemented for EAS builds")
        
        # Test proper instance management
        if "return UnifiedNotificationService.instance" in content:
            print_success("Proper instance management")
        else:
            print_error("Instance management missing")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Error testing singleton pattern: {e}")
        return False

def test_eas_build_notification_content():
    """Test notification content structure for EAS builds"""
    print_header("Testing EAS Build Notification Content")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test notification content structure
        content_scenarios = [
            "notificationContent",
            "title,",
            "body,",
            "sound:",
            "priority:",
            "data: {",
            "scheduleNotificationAsync"
        ]
        
        missing_content = []
        for scenario in content_scenarios:
            if scenario not in content:
                missing_content.append(scenario)
        
        if missing_content:
            print_error(f"Missing notification content: {missing_content}")
            return False
        
        print_success("Notification content structure implemented for EAS builds")
        
        # Test proper data structure
        if "data: {" in content and "type," in content:
            print_success("Proper data structure implemented")
        else:
            print_error("Data structure missing")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Error testing notification content: {e}")
        return False

def test_eas_build_cancellation_methods():
    """Test cancellation methods for EAS builds"""
    print_header("Testing EAS Build Cancellation Methods")
    
    try:
        service_path = "mobileapp/services/unifiedNotificationService.ts"
        with open(service_path, 'r') as f:
            content = f.read()
        
        # Test cancellation methods
        cancellation_scenarios = [
            "cancelNotification",
            "cancelNotificationById",
            "cancelNotificationsByType",
            "cancelAllNotifications",
            "getAllScheduledNotificationsAsync",
            "cancelScheduledNotificationAsync"
        ]
        
        missing_cancellation = []
        for scenario in cancellation_scenarios:
            if scenario not in content:
                missing_cancellation.append(scenario)
        
        if missing_cancellation:
            print_error(f"Missing cancellation methods: {missing_cancellation}")
            return False
        
        print_success("All cancellation methods implemented for EAS builds")
        
        # Test specific cancellation by ID
        if "notification.content.data?.notificationId === notificationId" in content:
            print_success("Specific cancellation by ID implemented")
        else:
            print_error("Specific cancellation by ID missing")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Error testing cancellation methods: {e}")
        return False

def test_eas_build_screens_integration():
    """Test screens integration for EAS builds"""
    print_header("Testing EAS Build Screens Integration")
    
    try:
        screens_path = "mobileapp/screens.tsx"
        with open(screens_path, 'r') as f:
            content = f.read()
        
        # Test integration scenarios
        integration_scenarios = [
            "unifiedNotificationService.scheduleCustomNotification",
            "unifiedNotificationService.scheduleDietNotifications",
            "unifiedNotificationService.scheduleNewDietNotification",
            "unifiedNotificationService.scheduleMessageNotification",
            "unifiedNotificationService.scheduleDietReminderNotification",
            "unifiedNotificationService.cancelNotification",
            "unifiedNotificationService.cancelNotificationsByType"
        ]
        
        missing_integration = []
        for scenario in integration_scenarios:
            if scenario not in content:
                missing_integration.append(scenario)
        
        if missing_integration:
            print_error(f"Missing integration: {missing_integration}")
            return False
        
        print_success("All screens integration implemented for EAS builds")
        
        # Test old service removal
        if "notificationService.scheduleCustomNotification" in content:
            print_error("Old notification service still being used")
            return False
        else:
            print_success("Old notification service properly removed")
        
        return True
        
    except Exception as e:
        print_error(f"Error testing screens integration: {e}")
        return False

def test_eas_build_app_json_configuration():
    """Test app.json configuration for EAS builds"""
    print_header("Testing EAS Build App.json Configuration")
    
    try:
        app_json_path = "mobileapp/app.json"
        if not os.path.exists(app_json_path):
            print_error("app.json not found")
            return False
        
        with open(app_json_path, 'r') as f:
            app_config = json.load(f)
        
        expo_config = app_config.get('expo', {})
        
        # Test notification configuration
        notification_config = expo_config.get('notification', {})
        if not notification_config:
            print_error("Notification configuration missing in app.json")
            return False
        
        # Test icon configuration
        icon = notification_config.get('icon')
        if icon != "./assets/logo.png":
            print_error(f"Incorrect notification icon: {icon}")
            return False
        
        print_success("Notification icon properly configured")
        
        # Test plugins configuration
        plugins = expo_config.get('plugins', [])
        expo_notifications_plugin = None
        
        for plugin in plugins:
            if isinstance(plugin, list) and len(plugin) > 0 and plugin[0] == "expo-notifications":
                expo_notifications_plugin = plugin[1] if len(plugin) > 1 else {}
                break
        
        if not expo_notifications_plugin:
            print_error("Expo-notifications plugin not configured")
            return False
        
        print_success("Expo-notifications plugin properly configured")
        
        return True
        
    except Exception as e:
        print_error(f"Error testing app.json configuration: {e}")
        return False

def generate_eas_edge_case_report(results):
    """Generate EAS edge case test report"""
    print_header("EAS-Specific Edge Cases Report")
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    failed_tests = total_tests - passed_tests
    
    print(f"üìä Total EAS Edge Case Tests: {total_tests}")
    print(f"‚úÖ Passed: {passed_tests}")
    print(f"‚ùå Failed: {failed_tests}")
    print(f"üìà Success Rate: {(passed_tests/total_tests)*100:.1f}%")
    
    print("\nüìã Detailed EAS Edge Case Results:")
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status} {test_name}")
    
    print("\nüîß EAS Build Edge Cases Covered:")
    print("  1. ‚úÖ Import issues and circular dependencies")
    print("  2. ‚úÖ Permission initialization and handling")
    print("  3. ‚úÖ Platform-specific optimizations")
    print("  4. ‚úÖ Timing edge cases and minimum delays")
    print("  5. ‚úÖ Error handling and crash prevention")
    print("  6. ‚úÖ Singleton pattern implementation")
    print("  7. ‚úÖ Notification content structure")
    print("  8. ‚úÖ Cancellation methods")
    print("  9. ‚úÖ Screens integration")
    print("  10. ‚úÖ App.json configuration")
    
    if failed_tests == 0:
        print("\nüéâ ALL EAS EDGE CASES VERIFIED!")
        print("üöÄ Notifications will work perfectly in EAS builds!")
    else:
        print(f"\n‚ö†Ô∏è  {failed_tests} EAS edge case(s) need attention")

def main():
    """Main EAS edge case test function"""
    print_header("EAS-Specific Edge Cases Test Suite")
    print_info("Testing edge cases that commonly cause issues in EAS builds")
    
    # Run all EAS edge case tests
    test_results = {}
    
    test_results["Import Issues"] = test_eas_build_import_issues()
    test_results["Permission Edge Cases"] = test_eas_build_permission_edge_cases()
    test_results["Platform-Specific Issues"] = test_eas_build_platform_specific_issues()
    test_results["Timing Edge Cases"] = test_eas_build_timing_edge_cases()
    test_results["Error Handling"] = test_eas_build_error_handling()
    test_results["Singleton Pattern"] = test_eas_build_singleton_pattern()
    test_results["Notification Content"] = test_eas_build_notification_content()
    test_results["Cancellation Methods"] = test_eas_build_cancellation_methods()
    test_results["Screens Integration"] = test_eas_build_screens_integration()
    test_results["App.json Configuration"] = test_eas_build_app_json_configuration()
    
    # Generate EAS edge case report
    generate_eas_edge_case_report(test_results)
    
    # Summary
    print_header("EAS Edge Case Summary")
    if all(test_results.values()):
        print_success("üéâ ALL EAS EDGE CASES PASSED!")
        print_info("‚úÖ No import issues or circular dependencies")
        print_info("‚úÖ Proper permission handling for EAS builds")
        print_info("‚úÖ Platform-specific optimizations implemented")
        print_info("‚úÖ Timing edge cases handled")
        print_info("‚úÖ Error handling prevents crashes")
        print_info("‚úÖ Singleton pattern prevents issues")
        print_info("‚úÖ Notification content properly structured")
        print_info("‚úÖ All cancellation methods working")
        print_info("‚úÖ Screens integration complete")
        print_info("‚úÖ App.json properly configured")
        print()
        print_info("üöÄ Notifications will work perfectly in EAS builds!")
        print_info("üì± Ready for production deployment!")
    else:
        print_error("‚ö†Ô∏è  Some EAS edge cases need attention")
        print_info("Please review failed tests and implement fixes")

if __name__ == "__main__":
    main()
