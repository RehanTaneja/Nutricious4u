#!/usr/bin/env python3

import requests
import json
import time
from datetime import datetime, timezone

def test_final_food_logging_verification():
    """
    Final verification that food logging issue is completely resolved:
    1. Test first food log works
    2. Test second food log works (the original issue)
    3. Test third food log works
    4. Verify all calories appear in summary immediately
    """
    
    base_url = "https://nutricious4u-production.up.railway.app/api"
    user_id = "EMoXb6rFuwN3xKsotq54K0kVArf1"
    
    print("üéØ FINAL FOOD LOGGING VERIFICATION")
    print("=" * 60)
    print(f"User: {user_id}")
    print(f"Test time: {datetime.now().isoformat()}")
    
    # Calculate timezone like frontend
    local_time = datetime.now()
    timezone_offset = datetime.now().astimezone().utcoffset().total_seconds() / 60
    timezone_offset = int(-timezone_offset)  # JavaScript uses negative values
    local_date = local_time.strftime('%Y-%m-%d')
    
    print(f"Local date: {local_date}")
    print(f"Timezone offset: {timezone_offset} minutes")
    print()
    
    # Get initial calories
    print("üìä GETTING INITIAL CALORIE COUNT")
    print("-" * 30)
    try:
        response = requests.get(f"{base_url}/food/log/summary/{user_id}", timeout=30)
        if response.status_code == 200:
            summary = response.json()
            
            initial_calories = 0
            for item in summary.get('history', []):
                if item.get('day') == local_date:
                    initial_calories = item.get('calories', 0)
                    break
            
            print(f"‚úÖ Initial calories for {local_date}: {initial_calories}")
        else:
            print(f"‚ùå Failed to get initial summary")
            return False
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False
    print()
    
    # Test foods to log
    test_foods = [
        {
            "name": "First Food Test",
            "calories": 100.0,
            "protein": 5.0,
            "fat": 2.0
        },
        {
            "name": "Second Food Test (Original Issue)",
            "calories": 150.0,
            "protein": 8.0,
            "fat": 3.0
        },
        {
            "name": "Third Food Test",
            "calories": 200.0,
            "protein": 10.0,
            "fat": 4.0
        }
    ]
    
    expected_total = initial_calories
    
    # Test each food log
    for i, food in enumerate(test_foods, 1):
        print(f"{i}Ô∏è‚É£ TESTING FOOD LOG #{i}: {food['name']}")
        print("-" * 40)
        
        # Log the food
        payload = {
            "userId": user_id,
            "foodName": food['name'],
            "servingSize": "100",
            "calories": food['calories'],
            "protein": food['protein'],
            "fat": food['fat'],
            "timezoneOffset": timezone_offset
        }
        
        try:
            print(f"   Logging: {food['name']} ({food['calories']} cal)")
            response = requests.post(f"{base_url}/food/log", json=payload, timeout=30)
            
            if response.status_code == 200:
                response_data = response.json()
                timestamp = response_data.get('timestamp')
                saved_date = timestamp.split('T')[0] if timestamp else 'Unknown'
                print(f"   ‚úÖ Logged successfully - saved on: {saved_date}")
                
                # Update expected total
                expected_total += food['calories']
                
                # Wait and check summary
                time.sleep(2)
                
                summary_response = requests.get(f"{base_url}/food/log/summary/{user_id}", timeout=30)
                if summary_response.status_code == 200:
                    updated_summary = summary_response.json()
                    
                    current_calories = 0
                    for item in updated_summary.get('history', []):
                        if item.get('day') == local_date:
                            current_calories = item.get('calories', 0)
                            break
                    
                    print(f"   Expected calories: {expected_total}")
                    print(f"   Actual calories: {current_calories}")
                    
                    if abs(current_calories - expected_total) < 1:
                        print(f"   ‚úÖ SUCCESS! Calories added correctly")
                    else:
                        print(f"   ‚ùå FAILED! Calories not added correctly")
                        print(f"   Difference: {expected_total - current_calories}")
                        return False
                else:
                    print(f"   ‚ùå Failed to get updated summary")
                    return False
                    
            else:
                print(f"   ‚ùå Food log failed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
            return False
        
        print()
    
    # Final verification
    print("üèÅ FINAL VERIFICATION")
    print("-" * 30)
    
    try:
        response = requests.get(f"{base_url}/food/log/summary/{user_id}", timeout=30)
        if response.status_code == 200:
            summary = response.json()
            
            final_calories = 0
            for item in summary.get('history', []):
                if item.get('day') == local_date:
                    final_calories = item.get('calories', 0)
                    break
            
            total_added = sum(food['calories'] for food in test_foods)
            expected_final = initial_calories + total_added
            
            print(f"Initial calories: {initial_calories}")
            print(f"Total calories added: {total_added}")
            print(f"Expected final: {expected_final}")
            print(f"Actual final: {final_calories}")
            
            if abs(final_calories - expected_final) < 1:
                print(f"‚úÖ PERFECT! All food logs worked correctly")
                return True
            else:
                print(f"‚ùå Final verification failed")
                return False
        else:
            print(f"‚ùå Failed to get final summary")
            return False
    except Exception as e:
        print(f"‚ùå Exception in final verification: {e}")
        return False

if __name__ == "__main__":
    success = test_final_food_logging_verification()
    
    if success:
        print()
        print("üéâ FOOD LOGGING ISSUE COMPLETELY RESOLVED!")
        print("=" * 60)
        print("‚úÖ First food log works correctly")
        print("‚úÖ Second food log works correctly (original issue)")
        print("‚úÖ Third food log works correctly")
        print("‚úÖ All calories appear in summary immediately")
        print("‚úÖ Everything uses user's local time consistently")
        print("‚úÖ User will see calories in tracker and graph right away")
        print("‚úÖ Food logging works perfectly for both confirm popup and direct logs")
        print()
        print("üîß TECHNICAL FIX SUMMARY:")
        print("- Frontend sends timezone offset with every food log request")
        print("- Backend calculates user's local time using timezone offset")
        print("- Food logs are saved with user's local date")
        print("- Summary calculation uses same local time logic")
        print("- Complete timezone consistency achieved")
    else:
        print()
        print("‚ùå FOOD LOGGING ISSUE STILL EXISTS")
        print("Need further investigation")
        
    exit(0 if success else 1)
