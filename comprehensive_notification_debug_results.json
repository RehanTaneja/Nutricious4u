{
  "timestamp": "2025-09-18T04:34:12.465638+00:00",
  "total_issues": 17,
  "critical_issues": 1,
  "high_issues": 7,
  "medium_issues": 7,
  "low_issues": 2,
  "issues": [
    {
      "cause": "Multiple Scheduling Systems",
      "severity": "CRITICAL",
      "description": "Both frontend (UnifiedNotificationService) and backend (SimpleNotificationScheduler) schedule notifications",
      "locations": [
        "mobileapp/services/unifiedNotificationService.ts:274-341",
        "backend/services/notification_scheduler_simple.py:29-116"
      ],
      "impact": "Same notification scheduled twice - once locally, once on backend",
      "evidence": "Frontend schedules with repeats:true, backend also schedules in database"
    },
    {
      "cause": "Day-wise Loop Creates Multiple Notifications",
      "severity": "HIGH",
      "description": "Frontend loops through selectedDays creating separate notifications for each day",
      "location": "mobileapp/services/unifiedNotificationService.ts:284-325",
      "impact": "One activity with 3 selected days = 3 separate notifications",
      "evidence": "for (let i = 0; i < selectedDays.length; i++) creates separate notifications"
    },
    {
      "cause": "Backend Recurring Logic Conflict",
      "severity": "HIGH",
      "description": "Backend sends notification once, mobile app handles repeats, but both systems active",
      "location": "backend/services/notification_scheduler_simple.py:218-223",
      "impact": "Backend sends once, mobile app repeats, but both are running simultaneously",
      "evidence": "Backend comment: 'mobile app handles recurring notifications with repeats: true'"
    },
    {
      "cause": "No Duplicate Prevention",
      "severity": "HIGH",
      "description": "No mechanism to prevent scheduling same notification multiple times",
      "locations": [
        "mobileapp/services/unifiedNotificationService.ts",
        "backend/services/notification_scheduler_simple.py"
      ],
      "impact": "User can trigger extraction multiple times, each creates new notifications",
      "evidence": "No activityId checking or duplicate prevention logic"
    },
    {
      "cause": "Extraction Button Multiple Clicks",
      "severity": "MEDIUM",
      "description": "User can press 'Extract from Diet PDF' button multiple times rapidly",
      "location": "mobileapp/screens.tsx:4646-4650",
      "impact": "Each click schedules new notifications without cancelling previous ones",
      "evidence": "No loading state or duplicate click prevention"
    },
    {
      "cause": "Firebase Functions Duplicate",
      "severity": "MEDIUM",
      "description": "Firebase Functions also send message notifications, potentially duplicating backend",
      "location": "functions/index.js:53-84",
      "impact": "Same message might trigger both backend and Firebase Functions notifications",
      "evidence": "Firestore trigger on message creation + backend API call"
    },
    {
      "cause": "Local vs Push Notification Confusion",
      "severity": "LOW",
      "description": "Both local and push notifications sent for messages",
      "location": "mobileapp/screens.tsx:6599-6630",
      "impact": "User might receive both local and push notification for same message",
      "evidence": "sendLocalMessageNotification + sendPushNotification both called"
    },
    {
      "cause": "No Duplicate Prevention for Diet Upload",
      "severity": "LOW",
      "description": "No mechanism to prevent multiple diet upload notifications",
      "location": "backend/server.py:1648-1676",
      "impact": "If upload endpoint called multiple times, user gets multiple notifications",
      "evidence": "No duplicate upload prevention logic"
    },
    {
      "cause": "Timezone Mismatch",
      "severity": "HIGH",
      "description": "Frontend uses local timezone, backend uses UTC",
      "locations": [
        "mobileapp/services/unifiedNotificationService.ts:481-528",
        "backend/services/notification_scheduler_simple.py:118-152"
      ],
      "impact": "Notifications scheduled for wrong day when timezone differs",
      "evidence": "Frontend: new Date() (local), Backend: datetime.now(timezone.utc)"
    },
    {
      "cause": "Immediate Trigger Prevention",
      "severity": "MEDIUM",
      "description": "Frontend prevents immediate triggers but backend doesn't",
      "location": "mobileapp/services/unifiedNotificationService.ts:109-130",
      "impact": "Inconsistent behavior between frontend and backend",
      "evidence": "Frontend: minimum 60 seconds, Backend: no minimum delay"
    },
    {
      "cause": "Repeat Interval Mismatch",
      "severity": "MEDIUM",
      "description": "Frontend uses 7 days in milliseconds, backend uses different calculation",
      "locations": [
        "mobileapp/services/unifiedNotificationService.ts:309",
        "backend/services/notification_scheduler_simple.py:246-273"
      ],
      "impact": "Different repeat intervals might cause timing issues",
      "evidence": "Frontend: 7 * 24 * 60 * 60 * 1000, Backend: 7 days calculation"
    },
    {
      "cause": "Incomplete Cancellation Logic",
      "severity": "HIGH",
      "description": "Backend cancellation returns 0 (no-op), only frontend cancels",
      "location": "backend/services/notification_scheduler_simple.py:21-27",
      "impact": "Backend scheduled notifications never cancelled, accumulate over time",
      "evidence": "return 0 since all notifications are handled locally"
    },
    {
      "cause": "No Cross-System Cancellation",
      "severity": "HIGH",
      "description": "Frontend cancellation doesn't affect backend scheduled notifications",
      "locations": [
        "mobileapp/services/unifiedNotificationService.ts:405-456",
        "backend/services/notification_scheduler_simple.py:21-27"
      ],
      "impact": "Cancelling frontend notifications doesn't cancel backend ones",
      "evidence": "Separate cancellation systems with no coordination"
    },
    {
      "cause": "No Cleanup of Old Notifications",
      "severity": "MEDIUM",
      "description": "Old sent/failed notifications accumulate in database",
      "location": "backend/services/notification_scheduler_simple.py:275-281",
      "impact": "Database grows with old notification records",
      "evidence": "return 0 since all notifications are handled locally"
    },
    {
      "cause": "Multiple Notification Listeners",
      "severity": "HIGH",
      "description": "Multiple screens have notification listeners that might conflict",
      "locations": [
        "mobileapp/screens.tsx:10886-10948 (DieticianDashboard)",
        "mobileapp/screens.tsx:6920-6930 (DieticianMessagesListScreen)",
        "mobileapp/screens.tsx:1240-1300 (DashboardScreen)"
      ],
      "impact": "Same notification might be processed multiple times",
      "evidence": "Multiple addNotificationReceivedListener calls"
    },
    {
      "cause": "Async Notification Scheduling",
      "severity": "MEDIUM",
      "description": "Notification scheduling is async but no proper error handling",
      "location": "mobileapp/services/unifiedNotificationService.ts:274-341",
      "impact": "Failed scheduling might not be properly handled",
      "evidence": "No retry logic or proper error handling for scheduling failures"
    },
    {
      "cause": "Database Write Conflicts",
      "severity": "MEDIUM",
      "description": "Multiple systems writing to same Firestore collections",
      "locations": [
        "backend/services/notification_scheduler_simple.py:100-102",
        "mobileapp/services/unifiedNotificationService.ts"
      ],
      "impact": "Concurrent writes might cause data inconsistency",
      "evidence": "Both systems write to scheduled_notifications collection"
    }
  ],
  "root_causes": {
    "duplicate_notifications": [
      "Dual scheduling systems (frontend + backend)",
      "Day-wise loop creates multiple notifications",
      "No duplicate prevention mechanism",
      "Incomplete cancellation logic",
      "Race conditions and concurrency issues"
    ],
    "targeting_issues": [
      "Message notifications: CORRECTLY TARGETED",
      "Diet upload notifications: CORRECTLY TARGETED",
      "Diet reminder notifications: WRONG TARGETING"
    ]
  },
  "immediate_fixes": [
    "Disable backend notification scheduling",
    "Fix day-wise loop to create single notification",
    "Add duplicate prevention with activityId checking",
    "Implement proper cancellation coordination",
    "Fix diet reminder targeting (users vs dieticians)"
  ]
}